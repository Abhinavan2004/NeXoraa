ðŸš€1.  Stream (GetStream.io) Overview
Stream offers backend infrastructure and SDKs for integrating real-time chat, video, and audio calls into your applications.

ðŸ’¬ 1. Stream Chat
ðŸ”¹ Features:
1-on-1 and Group Chats
Threads, Reactions, Mentions
Typing indicators
Message history & search
Push notifications
Attachments (images, files, audio)

ðŸ”¹ Supported Platforms:
Web (React, JavaScript)
Mobile (Flutter, React Native, Android, iOS)

ðŸ”¹ Example Use Cases:
In-app chat for customer service
Social apps like Instagram DMs
Team collaboration apps

ðŸ“ž 2. Stream Calls (Video + Audio)
ðŸ”¹ Overview:
Stream now supports video and audio calling via WebRTC under the product name Stream Video.

ðŸ”¹ Key Features:
1-on-1 and Group Video Calls
Audio Calls (like voice-only)
Screen Sharing
Call Recording (Pro plans)
Custom UI via SDKs
Network Quality Detection
Participant Events (join, leave, mute, etc.)
Secure & Encrypted calls

ðŸ”¹ SDKs Available:
JavaScript SDK for React/Web apps
Flutter SDK
React Native SDK
iOS & Android SDKs (Swift/Kotlin)

========================================================================================================

âœ… 2. MongoDB Atlas
Purpose: Cloud-based NoSQL database service

ðŸ”¹ What it does:
Stores your appâ€™s user data, messages, login credentials, chat history, etc.
Itâ€™s scalable (you can increase capacity as your user base grows).
Provides high availability, security, and backups.

ðŸ”¹ Why it's useful:
No need to manually set up database servers.
Easy integration with backend (Node.js, Express, etc.).
Offers a free tier with sufficient resources for dev/testing.
Built-in support for connection to cloud platforms like AWS, GCP, Azure.

ðŸ”¹ Features:
Clusters (database instance you connect to).
Collections (like tables, where documents are stored).
Documents (JSON-like records).
Easy access via MongoDB URI (used in .env file).

===============================================================================================

3.) in mongoose schema we have to types of schema formation 
        --> 1.const userSchema = new mongoose.Schema({...here our schema definition});
        --> 2.const userSchema = new mongoose.Schema({..here our schema defination} , {timestamps: true})

    diff is that in 2nd format the data entry in the databse will be done with timestamps like the data 
    entry is done at 12:53:37 like this or something like this which helps in telling the data entry is with us from how much time.

========================================================================================================================

4.)  friends:[
    {
    type:mongoose.Schema.Types.ObjectId,
    ref:"User"
 }
]

this is what i have used in databse Schema so what is its used???? --->> it is used for storing the relations in form of 
array of objectIds in the database. It helps in having the relation between the two tables in the database.

==================================================================================================================================

5.) To create a random profile_Pic_avatar as if the user has uploaded his image or dos not want to upload then you can 
generate the avatar png from the website """AVATAR PLACEHOLDER"""..

it helps in generating the avatar png;-'s using its API..

====================================================================================================================================


6.) We have used Stream Upserts in our code. What is it?
--> Upsert = Update + Insert
It means:
If a record (user, message, etc.) already exists, then update it.
If it doesn't exist, then create (insert) it.

Stream Upserts: Creating or updating user profiles on Stream's backend.
Ensures the user is always in sync between your system and Stream Chat.
It avoids duplicate users and ensures a consistent user profile.
Upstreamer() is probably a helper/wrapper function in your code.


=====================================================================================================================================

